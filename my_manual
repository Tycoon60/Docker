Установка ubuntu 20.04:
https://docs.docker.com/engine/install/ubuntu/
apt update && sudo apt-get install ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null 
sudo apt-get update && apt install -y docker-ce docker-ce-cli containerd.io

Docker Engine - установленный на ПК Docker.
Docker Container - работающий контейнер.
Docker Image - образ, с которого будет запускатся контейнер.
Dockerfile - файл настроек, в котором будут указаны настройки запуска контейнера или создания образа.

docker -v - узнать версию

Основные команды:
docker images - просмотреть имеющиеся образы на машине.
docker ps - показать запущенные контейнеры.
docker ps -a показать все имеющиеся контейнеры.
docker rmi bf756fb1ae65 стереть образ(если с этого образа был создан контейнер, то сначало удаляется контейнер)
docker stop|start|paused|restart e64b023193c0 остановить работающий контейнер
docker kill e64b023193c0 остановить зависший контейнер
docker rm a63f462c8938 удалить контейнер
docker login - залогинится в докер хаб, сайт
docker push tycoon60/k8sphp:latest  - залить образ в докер хаб, сайт
docker tag myk8sapp:latest tycoon60/k8sphp:latest - переименовать образ
docker rmi e2c0b9bec08e -f удалить образ, даже если он связан с другим образом или запущен
docker container prune удалить все не запущенные контейнеры 
docker rename name newname

docker stats просмотреть нагрузку в реальном времени
docker inspect my-mongo просмотреть детальную информацию о контейнере
docker inspect -f "{{.State.Status}}" my-mongo сделать выборку из файла контейнера, например просмотреть запущен он или нет

docker logs my-mongo просмотреть лог контейнера
docker logs my-mongo | grep "id" -m 2 > log.txt

docker pull tomcat - скачать образ веб сервера tomcat на свой ПК.
docker run tomcat - запустить контейнер (проверяет есть ли на него образ локально если нет то скачивает)
docker run -it -p 1234:8080 tomcat - запустить контейнер, -it запустить интерактивно(будет виден процесс установки/запуска, консоль будет захвачена, при выходе образ остановится), -p перенаправить порт контейнера на порт локальной машины 1234
docker run -d -p 1234:8080 tomcat запустить контейнер, -d запустить как демон
docker run -d -p 1235:80 nginx запустить контейнер, веб сервер nginx
docker run -d -p 1234:8080 --rm --name test4 tomcat запустить контейнер, --rm после выполнения кода или после остановки контейнер автоматически удаляется.

Зайти в консоль контейнера: docker exec -it 7ef53359bf71 /bin/bash
docker exec -w /root my-mongo pwd выполнить команду pwd в рабочей директории 

Передать часовой пояс в контейнер через переменную окружения: docker run -d -p 1234:8080 -e TZ=Europe/Moscov tomcat

Пимер запуска контейнера: docker run --name my-mongo -d mongo #Скачать с хаба образ mongo, если он есть, запустить в фоновом режиме (-d) с названием my-mongo

Создать контейнер и примонтировать папку с локального ПК на контейнер: docker run -d -p 1234:80 -v /root/bd:/var/www/html/ test:v1
Второй способ монтирование папок:
docker volume ls #просмотреть добавленные папки
docker volume create web # создать надстройку
docker run -d -p 1234:80 --rm --name web -v web:/var/www/html/ test:v1
Файлы которые используют надстройку монтирования volume хранятся тут: /var/lib/docker/volumes/
Т.е. например если контейнер был создан с пуствой БД, в процессе работы в БД появились данный и далее контейнер удалили то файл бд с последними данными будет в /var/lib/docker/volumes/ на локальной машине.

Создание dockerfile:
#---------------------------------------------------------------------------
# Dockefile to build Docker Image of Apache WebServer running on Ubuntu
#
# Made by Denis Astahov ADV-IT  13-March-2019
#---------------------------------------------------------------------------

FROM ubuntu:16.04 # на базе чего будет создан образ

RUN apt-get -y update # обновить
RUN apt-get -y install apache2 # установить веб сервер apache2

RUN echo 'Hello World from Docker!' > /var/www/html/index.html # создать файл index.html и передать в него текст 'Hello World from Docker!'

CMD ["/usr/sbin/apache2ctl", "-D","FOREGROUND"] # запустить службу как фоновый процесс
EXPOSE 80 # открываем 80 порт


Создание своего образа из файла описанного выше:
docker build -t test:v1 . где -t это название образа и его версия, а точка указывает на то, что docker файл, с которого нужно создать образ, находится в текущей директории.
Запуск созданного образа: docker run -d -p 7777:80 test:v1

Изменить номер версии (TAG) образа: docker tag test:v1 test:v2
Создать новую версию образа из запущенного(отредактированного) контейнера: docker commit 7ef53359bf71(id запущенного контейнера test:v1) test:v2


Примеры dockerfile(пробрасываемый порт указывается при запуске контейнера):
FROM python:3.6 #образ с python 3.6

RUN mkdir -p /usr/src/app/ # создать директорию
WORKDIR /usr/src/app/ # перейти в директорию

COPY . /usr/src/app/ # скопировать файлы с текущей папки в /usr/src/app/
RUN pip install --no-cache-dir -r requirements.txt # установить библиотеки используемые в программе на python из файла requirements.txt

EXPOSE 8080 # не пробрасывает порт, а просто указывает на то, что программы работает с портом 8080, который нужно будет пробросить при запуске контейнера

ENV TZ Europe/Moscow # С помощью ENV(передача переменной окружения) передаем временную зону TZ Europe/Moscow в контейнер

CMD ["python", "app.py"] # Запустить ранее скопированную программу на python


Docker-compose - позволяет создавать образы с необходимым функционалом из файла настроек и запускать контейнеры .
docker-compose up -d запустит создание контейнеров из файла yml, находящегося в текущей папке
docker-compose down остановит контейнеры, которые создавались из конкретного файл в текущей папке
docker-compose -f stack.yml up -d запустит создание контейнеров из файла yml, явно указав на него

docker network ls сеть
docker inspect <container id> | grep IPAddress найти адрес контейнера

